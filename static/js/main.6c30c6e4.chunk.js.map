{"version":3,"sources":["components/card/Card.component.jsx","components/card-list/Card-list.component.jsx","components/search-box/Search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","address","city","href","website","company","CardList","monsters","map","Card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","state","searchField","e","_this","setState","target","value","_this2","this","fetch","then","response","json","users","_this$state","filteredMonster","filter","toLowerCase","includes","Search_box_component_SearchBox","Card_list_component_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAEaA,qBAAO,SAACC,GACjB,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaC,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,aAAuDC,IAAI,YAC1FR,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQG,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQI,OAClBV,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQK,QAAQC,MAC1BZ,EAAAC,EAAAC,cAAA,KAAGW,KAAMd,EAAMO,QAAQQ,SAAUf,EAAMO,QAAQS,QAAQN,SCLlDO,EAAW,SAACjB,GAErB,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACpBJ,EAAMkB,SAASC,IAAI,SAAAZ,GAAO,OAAEN,EAAAC,EAAAC,cAACiB,EAAD,CAAMC,IAAKd,EAAQC,GAAID,QAASA,QCHtDe,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACvBxB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfsB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC4BCG,8MA5BbC,MAAM,CACJX,SAAS,GACTY,YAAY,MAQdL,aAAc,SAACM,GACbC,EAAKC,SAAS,CAACH,YAAYC,EAAEG,OAAOC,gEAPtC,WAAmB,IAAAC,EAAAC,KACjBC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAEN,EAAKH,SAAS,CAACf,SAASwB,4BAMxC,WACE,IAAAC,EAAgCN,KAAKR,MAA9BX,EAAPyB,EAAOzB,SAAUY,EAAjBa,EAAiBb,YACXc,EAAkB1B,EAAS2B,OAAO,SAAAtC,GAAO,OAAEA,EAAQG,KAAKoC,cAAcC,SAASjB,EAAYgB,iBAClG,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,6BACDF,EAAAC,EAAAC,cAAC6C,EAAD,CAAWxB,YAAY,iBAClBC,aAAcY,KAAKZ,eACvBxB,EAAAC,EAAAC,cAAC8C,EAAD,CAAU/B,SAAU0B,YAvBRM,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.6c30c6e4.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Card.style.css\";\nexport const Card = (props)=>{\n    return (<div className='card-container'>\n        <img className='monster-img'src={`https://robohash.org/${props.monster.id}?set=set2`} alt='monster'/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n        <p>{props.monster.address.city}</p>\n        <a href={props.monster.website}>{props.monster.company.name}</a>\n        </div>)\n}","import React from 'react'\nimport \"./Card-list.style.css\";\nimport {Card} from '../card/Card.component'\nexport const CardList = (props) =>{\n   \n    return (<div className='card-list'>\n      {props.monsters.map(monster=><Card key={monster.id} monster={monster}/>)}\n        </div>)\n}","import React from 'react'\nimport \"./Search-box.style.css\";\n\nexport const SearchBox = ({placeholder, handleChange})=>(\n  <input className='search'\n    type='search'\n    placeholder={placeholder} \n    onChange={handleChange}\n  />\n);\n\n // onChange={(e=>{\n  //   this.setState({searchField:e.target.value}, ()=> console.log(this.state))\n   //after immidetaily show log value put console as second argument of setstate\n  // })} ","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/Card-list.component';\nimport {SearchBox} from './components/search-box/Search-box.component'\n\n\nclass App extends React.Component {\n  state={\n    monsters:[],\n    searchField:''\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users=>this.setState({monsters:users}))\n  }\n\n  handleChange =(e)=>{\n    this.setState({searchField:e.target.value})\n  }\n render(){\n   const {monsters, searchField} = this.state;\n   const filteredMonster = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n  return (\n    <div className=\"App\">\n      {/* <CardList><h1>Evee</h1></CardList> */}\n      <h1>Monster Rolodex</h1> \n     <SearchBox placeholder='search monster' \n          handleChange={this.handleChange}/>\n      <CardList monsters={filteredMonster}/>\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}